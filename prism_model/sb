dtmc
global t_turn : bool init true; // global variable: 表示当前Time模块是否可运行
// system constants and formulae
// ================
const double thickness;     // 屏蔽层厚度: 1-100
const double SB_K = 0.0039; // 位移损伤剂量与厚度成正比关系，即d = SB_K * thickness
const double S3R_K = 200.5/3.0;
const double e = 2.71828182; // math.e
formula NIEL = SB_K * thickness;     // 太阳能电池一年内所受的非电离能损之和
formula IEL = S3R_K / thickness;    // S3R模块一年内所受的电离能损之和
const int DAYS = 365;
const int YEARS = 1;

module Time
    day : [1..DAYS] init 1; // 1 years
    [] t_turn=true&day<DAYS -> (day'=min(day+1, DAYS))&(t_turn'=false);
endmodule

// 太阳能电池模块
const double PMAX_THRESHOLD = 0.7; // 太阳能电池要求的最低功率
const double SB_A_MU = 0.1754;        // a的期望值
const double SB_A_SIGMA = 0.02319029 * 21; // a的标准差
const double SB_B = 12.0;               // pmax公式中的另一个参数
formula sb_dose = (day / 365.0) * NIEL; // 太阳能电池当前所受的非电离能损剂量
formula sb_x = (1.0 - PMAX_THRESHOLD) / (log(1.0 + sb_dose * SB_B, e));
formula sb_std_x = (sb_x - SB_A_MU) / SB_A_SIGMA;
// Compute CDF of standard normal distribution
// taken from https://www.johndcook.com/blog/cpp_phi/
// ================================================================================
const double a1 =  0.254829592;
const double a2 = -0.284496736;
const double a3 =  1.421413741;
const double a4 = -1.453152027;
const double a5 =  1.061405429;
const double p  =  0.3275911;
formula sb_sign = sb_std_x < 0 ? -1 : 1;
formula sb_std_x_2 = sb_sign * sb_std_x / pow(2.0, 0.5);
formula sb_t = 1.0/(1.0 + p * sb_std_x_2);
formula sb_y = 1.0 - (((((a5*sb_t + a4)*sb_t) + a3)*sb_t + a2)*sb_t + a1)*sb_t*pow(e, -sb_std_x_2 * sb_std_x_2);
formula sb_fail_prob = 1 - 0.5 * (1.0 + sb_sign * sb_y);
module SolarBattery
    sb_status: [0..1] init 1; // 太阳能电池所处的状态：1：正常；0：失效
    [] sb_status=1&t_turn=false&s3r_status=1 ->  sb_fail_prob:(sb_status'=0)&(t_turn'=true) + (1-sb_fail_prob): (sb_status'=1)&(t_turn'=true);
endmodule


// 分流调节器
// S3R constants, variables, formulae
// ==================================
// constants
const int deltaV_threshold = 450;                 // 阈值电压漂移阈值——阈值电压漂移大于此值即认为失效
const double s3r_b = 0.01731;                     // 阈值电压漂移公式中的参数b
const double s3r_a_mu = 570.8 * 18 - 570.8 * 5;               // a的期望: data from MOS.py
const double s3r_a_sigma = 6.7471 * 120;          // a的标准差: data from MOS.py
formula s3r_cur_dose = (day / 365.0) * IEL; // S3R当前所受的电离能损总剂量
formula s3r_cdf_x = deltaV_threshold / (s3r_b * pow(e, s3r_b * s3r_cur_dose));
formula s3r_std_cdf_x = (s3r_cdf_x - s3r_a_mu) / s3r_a_sigma;
// compute the cumulative probability density (cdf) of standard normal distribution
// taken from https://www.johndcook.com/blog/cpp_phi/
// ================================================================================
formula s3r_sign = s3r_std_cdf_x < 0 ? -1 : 1;
formula s3r_std_cdf_x_2 = s3r_sign * s3r_std_cdf_x / pow(2.0, 0.5);
formula s3r_t = 1.0/(1.0 + p * s3r_std_cdf_x_2);
formula s3r_y = 1.0 - (((((a5*s3r_t + a4)*s3r_t) + a3)*s3r_t + a2)*s3r_t + a1)*s3r_t*pow(e, -s3r_std_cdf_x_2 * s3r_std_cdf_x_2);
formula s3r_fail_prob = 1 - 0.5 * (1.0 + s3r_sign * s3r_y);  // 根据s3r所受电离能损剂量计算出的失效概率

module S3R
    s3r_status: [0..1] init 1;
    [] s3r_status=1&t_turn=false&sb_status=1 -> s3r_fail_prob:(s3r_status'=0)&(t_turn'=true) + (1 - s3r_fail_prob):(s3r_status'=1)&(t_turn'=true);
endmodule

label "failure" = sb_status=0 | s3r_status=0;

